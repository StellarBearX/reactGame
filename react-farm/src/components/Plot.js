/**
 * ============================================
 * üìÅ Plot.js - Component ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á
 * ============================================
 * 
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà
 * 
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
 * 1. ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà
 * 2. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏õ‡∏•‡∏á: ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
 * 3. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï (progress bar, time remaining)
 * 4. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÉ‡∏ä‡πâ useEffect + setInterval)
 * 
 * ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á:
 * - FarmGrid.js: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Component ‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á
 * - farmSlice.js: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ plantCrop ‡πÅ‡∏•‡∏∞ harvestCrop actions
 * - time.js: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
 * - crops.js: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä (icon, name, growTime)
 * - sound.js: ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
 * 
 * Props:
 * - plot: Object { id, crop, plantedAt, isGrown }
 * 
 * State:
 * - tick: ‡πÉ‡∏ä‡πâ trigger re-render ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
 */

import React, { useEffect, useState } from "react";
import PropTypes from 'prop-types';
import { useSelector, useDispatch } from 'react-redux'; // üîó Redux Hooks: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞ Dispatch Actions
import { plantCrop, harvestCrop } from '../state/farmSlice.js'; // üîó Redux Actions: ‡∏õ‡∏•‡∏π‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
import { calculateGrowthProgress, getTimeRemaining, formatTime, isFullyGrown } from "../utils/time.js"; // üîó Utilities: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤
import { CROPS_DATA } from '../data/crops.js'; // üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
import { playHarvest, playPick } from '../utils/sound.js'; // üîó ‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏≠‡∏ü‡πÄ‡∏ü‡∏Å‡∏ï‡πå

/**
 * Plot: Component ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä
 * 
 * @param {Object} plot - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏•‡∏π‡∏Å { id, crop, plantedAt, isGrown }
 */
function Plot({ plot }) {
  // üîó Redux: Dispatch Actions
  const dispatch = useDispatch();
  
  // üîó Redux: ‡∏î‡∏∂‡∏á selectedSeed ‡∏à‡∏≤‡∏Å Store (‡πÄ‡∏°‡∏•‡πá‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏•‡∏π‡∏Å)
  const selectedSeed = useSelector((state) => state.farm.selectedSeed);
  
  // üîó ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏à‡∏≤‡∏Å CROPS_DATA (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà)
  const crop = plot.crop ? CROPS_DATA[plot.crop] : null;

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö trigger re-render ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI (progress, time remaining) ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏ö‡∏ö real-time
  const [, setTick] = useState(0);

  /**
   * useEffect: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
   * 
   * Flow:
   * 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (plot.crop)
   * 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á setInterval ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å setTick ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
   * 3. setTick ‡∏à‡∏∞ trigger re-render ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI
   * 4. Cleanup: ‡∏•‡∏ö interval ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component Unmount ‡∏´‡∏£‡∏∑‡∏≠ plot.crop ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
   */
  useEffect(() => {
    if (!plot.crop) return; // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
    
    const interval = setInterval(() => {
      setTick(t => t + 1); // üîó Trigger re-render ‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }, 1000);
    
    return () => clearInterval(interval); // Cleanup
  }, [plot.crop]);

  /**
   * handlePlotClick: ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏õ‡∏•‡∏á
   * 
   * Flow:
   * 1. ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á + ‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà ‚Üí ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä (dispatch plantCrop)
   * 2. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏∑‡∏ä + ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà (grown) ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß (dispatch harvestCrop)
   * 
   * üîó Redux Actions: plantCrop, harvestCrop
   * üîó Sound Effects: playPick (‡∏õ‡∏•‡∏π‡∏Å), playHarvest (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß)
   */
  const handlePlotClick = () => {
    if (!plot.crop && selectedSeed) {
      // ‡∏Å‡∏£‡∏ì‡∏µ: ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á + ‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä
      dispatch(plantCrop(plot.id)); // üîó Redux Action: ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä
      playPick(); // üîó ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä
    } else if (plot.crop && grown) {
      // ‡∏Å‡∏£‡∏ì‡∏µ: ‡∏°‡∏µ‡∏û‡∏∑‡∏ä + ‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà ‚Üí ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
      dispatch(harvestCrop(plot.id)); // üîó Redux Action: ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
      playHarvest(); // üîó ‡πÄ‡∏™‡∏µ‡∏¢‡∏á: ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß
    }
  };

  // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡πà‡∏≤‡∏á ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏•‡∏π‡∏Å
  if (!plot.crop) {
    return (
      <div className="plot empty" onClick={handlePlotClick}>
        {/* ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏°‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏•‡∏π‡∏Å, ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‚Üí ‡πÅ‡∏™‡∏î‡∏á "‡∏ß‡πà‡∏≤‡∏á" */}
        {selectedSeed ? 'üå± ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏π‡∏Å' : '‡∏ß‡πà‡∏≤‡∏á'}
      </div>
    );
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï
  const progress = calculateGrowthProgress(plot.plantedAt, crop.growTime); // üîó ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
  const grown = isFullyGrown(plot.plantedAt, crop.growTime); // üîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const timeLeft = getTimeRemaining(plot.plantedAt, crop.growTime); // üîó ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠

  // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏∑‡∏ä‡∏õ‡∏•‡∏π‡∏Å‡∏≠‡∏¢‡∏π‡πà
  return (
    <div
      className={`plot ${grown ? "grown" : "growing"}`} // CSS class: grown ‡∏´‡∏£‡∏∑‡∏≠ growing
      onClick={handlePlotClick}
    >
      {/* ‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡∏ä */}
      <div>{crop.icon} {crop.name}</div>
      
      {/* ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà ‚Üí ‡πÅ‡∏™‡∏î‡∏á "‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ!" */}
      {/* ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï ‚Üí ‡πÅ‡∏™‡∏î‡∏á progress % ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠ */}
      {grown ? (
        <span>‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡πÑ‡∏î‡πâ!</span>
      ) : (
        <span>{progress.toFixed(0)}% ({formatTime(timeLeft)})</span> // üîó ‡πÅ‡∏™‡∏î‡∏á progress ‡πÅ‡∏•‡∏∞ time remaining
      )}
    </div>
  );
}

// PropTypes validation
Plot.propTypes = {
  plot: PropTypes.shape({
    id: PropTypes.number.isRequired, // ID ‡∏Ç‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á
    crop: PropTypes.string, // ID ‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å (‡πÄ‡∏ä‡πà‡∏ô 'tomato') ‡∏´‡∏£‡∏∑‡∏≠ null
    plantedAt: PropTypes.number, // Timestamp ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏π‡∏Å
    isGrown: PropTypes.bool // ‡∏û‡∏∑‡∏ä‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÄ‡∏ï‡πá‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  }).isRequired
};

export default Plot;
