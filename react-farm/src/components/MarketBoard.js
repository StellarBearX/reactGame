/**
 * ============================================
 * üìÅ MarketBoard.js - Component ‡∏ï‡∏•‡∏≤‡∏î (Market Board)
 * ============================================
 * 
 * ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏•‡∏≤‡∏î Dynamic Market ‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
 * 
 * ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å:
 * 1. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô, ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô, ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå)
 * 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
 * 3. ‡πÅ‡∏™‡∏î‡∏á‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Spring, Summer, Autumn, Winter)
 * 4. ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏© (Events) ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
 * 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏∏‡πà‡∏° (30% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)
 * 6. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å API (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * 7. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (Dynamic Pricing)
 * 
 * ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á:
 * - TabbedSidebar.js: ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Tab 'market'
 * - farmSlice.js: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ updateMarketPrices, addMarketEvent, removeMarketEvent actions
 * - market.js: ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤ (calculateCurrentPrices, calculatePriceTrend, generateRandomEvent)
 * - crops.js: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (CROPS_DATA)
 * - time.js: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (getGameDay)
 * - useMarketAPI.js: Custom Hook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å API
 * - Redux Store: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• gameStartTime, market, level
 * 
 * Flow ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:
 * 1. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏° (60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ = 1 ‡∏ß‡∏±‡∏ô)
 * 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏∏‡πà‡∏° (30% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)
 * 3. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
 * 4. ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå (up/down/stable) ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
 */

import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux'; // üîó Redux Hooks
import { updateMarketPrices, addMarketEvent, removeMarketEvent } from '../state/farmSlice.js'; // üîó Redux Actions
import { calculateCurrentPrices, getCurrentSeason, generateRandomEvent, calculatePriceTrend, MARKET_EVENTS } from '../data/market.js'; // üîó Market Data & Functions
import { CROPS_DATA } from '../data/crops.js'; // üîó ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡∏ä‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
import { getGameDay } from '../utils/time.js'; // üîó Utility: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
import { useMarketAPI } from '../hooks/useMarketAPI.js'; // üîó Custom Hook: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å API

/**
 * MarketBoard: Component ‡∏ï‡∏•‡∏≤‡∏î (Market Board)
 * 
 * ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©
 */
function MarketBoard() {
  const dispatch = useDispatch();
  const gameStartTime = useSelector((state) => state.farm.gameStartTime);
  const market = useSelector((state) => state.farm.market);
  const level = useSelector((state) => state.farm.level);
  
  const [isExpanded, setIsExpanded] = useState(false);
  
  const currentDay = getGameDay(gameStartTime);
  
  // ‚úÖ GET method - Fetch market data from API via custom hook
  const { marketData: apiMarketData, loading: marketLoading } = useMarketAPI(currentDay, market.activeEvents);
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏•‡∏≤‡∏î‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô
  useEffect(() => {
    const shouldUpdatePrices = !market.lastPriceUpdate || 
      (Date.now() - market.lastPriceUpdate) > (60 * 1000); // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏ó‡∏∏‡∏Å 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (1 ‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°)
    
    if (shouldUpdatePrices) {
      // Always recalculate prices with current activeEvents to ensure dynamic pricing works
      const marketData = calculateCurrentPrices(currentDay, market.activeEvents);
      const trends = calculatePriceTrend(marketData.prices, market.previousPrices);
      
      dispatch(updateMarketPrices({
        prices: marketData.prices,
        season: marketData.season,
        activeEvents: market.activeEvents,
        trends
      }));
    }
  }, [currentDay, dispatch, market.lastPriceUpdate, market.activeEvents, market.previousPrices]);
  
  // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠ activeEvents ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö dynamic pricing)
  useEffect(() => {
    // Skip if prices not initialized yet (wait for main update)
    if (!market.currentPrices || Object.keys(market.currentPrices).length === 0) {
      return;
    }
    
    // Recalculate prices with current activeEvents when events change
    const marketData = calculateCurrentPrices(currentDay, market.activeEvents);
    const trends = calculatePriceTrend(marketData.prices, market.previousPrices);
    
    dispatch(updateMarketPrices({
      prices: marketData.prices,
      season: marketData.season,
      activeEvents: market.activeEvents,
      trends
    }));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [market.activeEvents]); // Only trigger when events change
  
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏∏‡πà‡∏°
  useEffect(() => {
    const shouldGenerateEvent = Math.random() < 0.3 && market.activeEvents.length < 2; // 30% ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™, ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 2 ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
    
    if (shouldGenerateEvent) {
      const event = generateRandomEvent();
      dispatch(addMarketEvent(event));
      
      // ‡∏•‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
      setTimeout(() => {
        dispatch(removeMarketEvent(event.id));
      }, event.duration * 60 * 1000); // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    }
  }, [currentDay, dispatch, market.activeEvents.length]);
  
  const getTrendIcon = (trend) => {
    if (!trend) return '‚ûñ';
    switch (trend.direction) {
      case 'up': return 'üìà +';
      case 'down': return 'üìâ -';
      default: return '‚ûñ';
    }
  };
  
  const getTrendColor = (trend) => {
    if (!trend) return '#6b7280';
    switch (trend.direction) {
      case 'up': return '#16a34a';
      case 'down': return '#dc2626';
      default: return '#6b7280';
    }
  };
  
  const getSeasonInfo = () => {
    const seasons = {
      spring: { name: '‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏ú‡∏•‡∏¥', emoji: 'üå∏', color: '#ec4899' },
      summer: { name: '‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô', emoji: '‚òÄÔ∏è', color: '#f59e0b' },
      autumn: { name: '‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏£‡πà‡∏ß‡∏á', emoji: 'üçÇ', color: '#ea580c' },
      winter: { name: '‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß', emoji: '‚ùÑÔ∏è', color: '#0ea5e9' }
    };
    return seasons[market.currentSeason] || seasons.spring;
  };
  
  const seasonInfo = getSeasonInfo();
  
  return (
    <div style={{
      background: 'linear-gradient(135deg, #fef3c7 0%, #fde68a 100%)',
      borderRadius: '16px',
      padding: '20px',
      boxShadow: '0 4px 12px rgba(0,0,0,0.1)',
      border: '2px solid #f59e0b'
    }}>
      <div style={{
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px'
      }}>
        <h2 style={{
          color: '#92400e',
          margin: 0,
          fontSize: '24px',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          üìä ‡∏ï‡∏•‡∏≤‡∏î
        </h2>
        {/* <button
          onClick={() => setIsExpanded(!isExpanded)}
          style={{
            background: '#f59e0b',
            border: 'none',
            color: 'white',
            padding: '8px 16px',
            borderRadius: '8px',
            cursor: 'pointer',
            fontSize: '14px',
            fontWeight: 'bold'
          }}
        >
          {isExpanded ? '‡∏¢‡πà‡∏≠' : '‡∏Ç‡∏¢‡∏≤‡∏¢'}
        </button> */}
      </div>
      
      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå */}
      <div style={{
        display: 'flex',
        gap: '12px',
        marginBottom: '20px',
        flexWrap: 'wrap'
      }}>
        <div style={{
          background: seasonInfo.color,
          color: 'white',
          padding: '8px 16px',
          borderRadius: '20px',
          fontSize: '14px',
          fontWeight: 'bold',
          display: 'flex',
          alignItems: 'center',
          gap: '6px'
        }}>
          {seasonInfo.emoji} {seasonInfo.name}
        </div>
        
        {market.activeEvents.map(eventId => {
          const event = MARKET_EVENTS[eventId];
          if (!event) return null;
          
          return (
            <div key={eventId} style={{
              background: event.color,
              color: 'white',
              padding: '8px 16px',
              borderRadius: '20px',
              fontSize: '14px',
              fontWeight: 'bold',
              display: 'flex',
              alignItems: 'center',
              gap: '6px'
            }}>
              {event.emoji} {event.name}
            </div>
          );
        })}
      </div>
      
      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤ */}
      <div style={{
        display: 'grid',
        gridTemplateColumns: isExpanded ? 'repeat(auto-fit, minmax(200px, 1fr))' : 'repeat(auto-fit, minmax(150px, 1fr))',
        gap: '12px'
      }}>
        {Object.entries(CROPS_DATA).map(([cropId, crop]) => {
          const currentPrice = market.currentPrices[cropId] || crop.sellPrice;
          const trend = market.priceTrends[cropId];
          const basePrice = crop.sellPrice;
          const priceChange = currentPrice - basePrice;
          const priceChangePercent = basePrice > 0 ? ((priceChange / basePrice) * 100).toFixed(1) : '0.0';
          
          // Use price change from base price for display (not trend from previous price)
          const displayPercentage = Math.abs(parseFloat(priceChangePercent));
          const displayDirection = priceChange >= 0 ? 'up' : 'down';
          
          return (
            <div 
              key={cropId} 
              style={{
                background: 'white',
                borderRadius: '12px',
                padding: '16px',
                border: '2px solid #e5e7eb',
                cursor: 'pointer',
                boxShadow: 'none'
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.setProperty('transform', 'scale(1.02)', 'important');
                e.currentTarget.style.setProperty('box-shadow', 'none', 'important');
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.setProperty('transform', 'scale(1)', 'important');
                e.currentTarget.style.setProperty('box-shadow', 'none', 'important');
              }}
            >
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginBottom: '8px'
              }}>
                <span style={{ fontSize: '24px' }}>{crop.icon}</span>
                <div>
                  <div style={{
                    fontWeight: 'bold',
                    fontSize: '14px',
                    color: '#1f2937'
                  }}>
                    {crop.name}
                  </div>
                  <div style={{
                    fontSize: '12px',
                    color: '#6b7280'
                  }}>
                    ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏ø{basePrice}
                  </div>
                </div>
              </div>
              
              <div style={{
                display: 'flex',
                justifyContent: 'space-between',
                alignItems: 'center',
                marginBottom: '8px'
              }}>
                <div style={{
                  fontSize: '18px',
                  fontWeight: 'bold',
                  color: priceChange >= 0 ? '#16a34a' : '#dc2626'
                }}>
                  ‡∏ø{currentPrice}
                </div>
                <div style={{
                  display: 'flex',
                  alignItems: 'center',
                  gap: '4px',
                  fontSize: '12px',
                  color: priceChange >= 0 ? '#16a34a' : '#dc2626'
                }}>
                  {priceChange > 0 ? 'üìà' : priceChange < 0 ? 'üìâ' : '‚ûñ'}
                  {priceChange !== 0 ? `${priceChange >= 0 ? '+' : ''}${priceChangePercent}%` : '0%'}
                </div>
              </div>
              
              {isExpanded && (
                <div style={{
                  fontSize: '11px',
                  color: '#6b7280',
                  textAlign: 'center',
                  padding: '4px',
                  background: '#f9fafb',
                  borderRadius: '6px'
                }}>
                  {priceChange >= 0 ? '+' : ''}{priceChangePercent}% ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                </div>
              )}
            </div>
          );
        })}
      </div>
      
      {isExpanded && (
        <div style={{
          marginTop: '20px',
          padding: '16px',
          background: 'rgba(255,255,255,0.7)',
          borderRadius: '12px',
          border: '1px solid #e5e7eb'
        }}>
          <h3 style={{
            fontSize: '16px',
            fontWeight: 'bold',
            color: '#374151',
            marginBottom: '12px'
          }}>
            üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
          </h3>
          <div style={{
            fontSize: '14px',
            color: '#6b7280',
            lineHeight: '1.5'
          }}>
            ‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå<br/>
            ‚Ä¢ ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡πÑ‡∏ß‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á<br/>
            ‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤<br/>
            ‚Ä¢ ‡∏£‡∏∞‡∏î‡∏±‡∏ö {level >= 5 ? '‚úÖ' : 'üîí'} 5: ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏Ñ‡∏≤
          </div>
        </div>
      )}
    </div>
  );
}

export default MarketBoard;
