// src/data/market.js
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏•‡∏≤‡∏î‡πÅ‡∏ö‡∏ö Dynamic ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á

export const MARKET_EVENTS = {
  // ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
  tomato_shortage: {
    id: 'tomato_shortage',
    name: '‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡∏ô‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®',
    description: '‡πÇ‡∏£‡∏Ñ‡∏£‡∏∞‡∏ö‡∏≤‡∏î‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏Ç‡∏≤‡∏î‡πÅ‡∏Ñ‡∏•‡∏ô',
    duration: 3, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô
    effects: {
      tomato: { multiplier: 1.2, type: 'price_up' }
    },
    emoji: 'üçÖ',
    color: '#ef4444'
  },
  
  wheat_harvest: {
    id: 'wheat_harvest',
    name: '‡∏§‡∏î‡∏π‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏•‡∏µ',
    description: '‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏•‡∏µ‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏≤‡∏î',
    duration: 2,
    effects: {
      wheat: { multiplier: 0.8, type: 'price_down' }
    },
    emoji: 'üåæ',
    color: '#f59e0b'
  },
  
  pumpkin_festival: {
    id: 'pumpkin_festival',
    name: '‡πÄ‡∏ó‡∏®‡∏Å‡∏≤‡∏•‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á',
    description: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô',
    duration: 4,
    effects: {
      pumpkin: { multiplier: 1.5, type: 'price_up' }
    },
    emoji: 'üéÉ',
    color: '#f97316'
  },
  
  carrot_demand: {
    id: 'carrot_demand',
    name: '‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û',
    description: '‡∏Ñ‡∏ô‡∏´‡∏±‡∏ô‡∏°‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô',
    duration: 3,
    effects: {
      carrot: { multiplier: 1.3, type: 'price_up' }
    },
    emoji: 'ü•ï',
    color: '#f97316'
  },
  
  corn_surplus: {
    id: 'corn_surplus',
    name: '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏•‡πâ‡∏ô‡∏ï‡∏•‡∏≤‡∏î',
    description: '‡∏ú‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ',
    duration: 2,
    effects: {
      corn: { multiplier: 0.7, type: 'price_down' }
    },
    emoji: 'üåΩ',
    color: '#fbbf24'
  }
};

export const SEASONAL_MODIFIERS = {
  spring: {
    name: '‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏ú‡∏•‡∏¥',
    emoji: 'üå∏',
    modifiers: {
      tomato: 1.1, // ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡πÉ‡∏ô‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏ú‡∏•‡∏¥
      carrot: 1.0,
      corn: 0.9,
      wheat: 1.0,
      pumpkin: 0.8
    }
  },
  
  summer: {
    name: '‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô',
    emoji: '‚òÄÔ∏è',
    modifiers: {
      tomato: 1.2, // ‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏§‡∏î‡∏π‡∏£‡πâ‡∏≠‡∏ô
      carrot: 0.9,
      corn: 1.1,
      wheat: 0.8,
      pumpkin: 0.7
    }
  },
  
  autumn: {
    name: '‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏£‡πà‡∏ß‡∏á',
    emoji: 'üçÇ',
    modifiers: {
      tomato: 0.8,
      carrot: 1.1,
      corn: 1.0,
      wheat: 1.3, // ‡∏Ç‡πâ‡∏≤‡∏ß‡∏™‡∏≤‡∏•‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡πÉ‡∏ô‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏£‡πà‡∏ß‡∏á
      pumpkin: 1.4 // ‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡∏°‡∏≤‡∏Å‡πÉ‡∏ô‡∏§‡∏î‡∏π‡πÉ‡∏ö‡πÑ‡∏°‡πâ‡∏£‡πà‡∏ß‡∏á
    }
  },
  
  winter: {
    name: '‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß',
    emoji: '‚ùÑÔ∏è',
    modifiers: {
      tomato: 0.6,
      carrot: 1.2, // ‡πÅ‡∏Ñ‡∏£‡∏≠‡∏ó‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏µ‡πÉ‡∏ô‡∏§‡∏î‡∏π‡∏´‡∏ô‡∏≤‡∏ß
      corn: 0.9,
      wheat: 1.1,
      pumpkin: 1.0
    }
  }
};

// ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå)
export const BASE_PRICES = {
  tomato: 150,
  carrot: 45,
  corn: 150,
  wheat: 10,
  pumpkin: 450
};

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
export function calculateCurrentPrices(gameDay, activeEvents = []) {
  const season = getCurrentSeason(gameDay);
  const seasonalModifier = SEASONAL_MODIFIERS[season];
  
  const prices = {};
  
  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô + ‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•
  Object.keys(BASE_PRICES).forEach(cropId => {
    let price = BASE_PRICES[cropId] * seasonalModifier.modifiers[cropId];
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
    activeEvents.forEach(eventId => {
      const event = MARKET_EVENTS[eventId];
      if (event && event.effects[cropId]) {
        const effect = event.effects[cropId];
        if (effect.type === 'price_up') {
          price *= effect.multiplier;
        } else if (effect.type === 'price_down') {
          price *= effect.multiplier;
        }
      }
    });
    
    prices[cropId] = Math.round(price);
  });
  
  return {
    prices,
    season,
    seasonalModifier,
    activeEvents
  };
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Å‡∏°
export function getCurrentSeason(gameDay) {
  const seasons = ['spring', 'summer', 'autumn', 'winter'];
  const seasonIndex = Math.floor((gameDay - 1) / 7) % 4; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏§‡∏î‡∏π‡∏ó‡∏∏‡∏Å 7 ‡∏ß‡∏±‡∏ô
  return seasons[seasonIndex];
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏∏‡πà‡∏°
export function generateRandomEvent() {
  const eventIds = Object.keys(MARKET_EVENTS);
  const randomEventId = eventIds[Math.floor(Math.random() * eventIds.length)];
  return MARKET_EVENTS[randomEventId];
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
export function isEventActive(eventStartDay, eventDuration, currentDay) {
  return currentDay < eventStartDay + eventDuration;
}

// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô)
export function calculatePriceTrend(currentPrices, previousPrices) {
  const trends = {};
  
  Object.keys(currentPrices).forEach(cropId => {
    const current = currentPrices[cropId];
    const previous = previousPrices[cropId] || current;
    
    if (current > previous) {
      trends[cropId] = { direction: 'up', change: current - previous, percentage: ((current - previous) / previous * 100).toFixed(1) };
    } else if (current < previous) {
      trends[cropId] = { direction: 'down', change: previous - current, percentage: ((previous - current) / previous * 100).toFixed(1) };
    } else {
      trends[cropId] = { direction: 'stable', change: 0, percentage: 0 };
    }
  });
  
  return trends;
}
